/* Base parameters */
params {
    workflow_id         = ""
    cram                = ""
    csv                 = ""
    vcf                 = ""
    dict                = ""
    dbsnp               = ""
    gwas                = ""
    clinvar             = ""
    fasta               = ""
    indel               = ""
    intervalList        = ""
    ipdir               = ""
    max_cpus            = 16
    max_memory          = '64.GB'
    max_time            = '240.h'
    output_dir          = ""
    paired				= true
    processid           = ""
    publish_dir_mode    = 'copy'
    snp                 = ""
    trim                = ""
    sequencing_type     = "WES"
    skip_tools          = "actionables,deepvariant"
    skip_steps          = ""
    dryrun              = "false"
    bed                 = ""
    rglb                = "lib1"
    rgpl                = "ILLUMINA"
    rgpu                = "unit1"
    version             = 'v0.0.1'
    run_process         = '' //mapping,bamprocessing,vcfcalling,vcfannotation
    log                 = ""
}

/* Including other config files */
includeConfig './conf/base.config'
includeConfig './conf/modules.config'
includeConfig './conf/colors.config'
includeConfig './conf/local.config'

docker {
    enabled     = true
    temp        = 'auto'
    remove      = true
    runOptions  = '-u $(id -u):$(id -g)'
}

profiles {

    standard {
        process.executor    = 'local'
    }

    awsbatch {
        process.executor    = 'awsbatch'
        process.container   = 'glslabs/glslabs_public:main'
    }
}

plugins {
    id 'nf-amazon'
}

/* Defining function to trace the pipeline wokflow */
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
    timeline {
        enabled = true
        file    = "${params.output_dir}/${params.workflow_id}/pipeline_info/execution_timeline_${params.workflow_id}.html"
    }
    report {
        enabled = true
        file    = "${params.output_dir}/${params.workflow_id}/pipeline_info/execution_report_${params.workflow_id}.html"
    }
    trace {
        enabled = true
        file    = "${params.output_dir}/${params.workflow_id}/pipeline_info/execution_trace_${params.workflow_id}.txt"
    }
    dag {
        enabled = true
        file    = "${params.output_dir}/${params.workflow_id}/pipeline_info/pipeline_dag_${params.workflow_id}.html"
    }

/* Defining function to allocate memory, cpu, and time */
def check_max(obj, type) {
    if (type == 'memory') {    /* Checks meemory allocation */
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {    /* Checks time allocation */
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {     /* Checks CPU allocation */
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

manifest {
    name            = 'GENASSURE-NF'
    author          = """ GeneSpectrum Life Sciences, Pune"""
    homePage        = 'https://genespectrum.in/'
    description     = """A NGS Analysis Suite"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = params.version
}