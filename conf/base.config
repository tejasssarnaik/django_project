/************************************************
	BASE-Configuration file for processes
    It can be modified according to the
    user requirements.

FASTQC: staphb/fastqc
MULTIQC: staphb/multiqc
FASTP: staphb/fastp
BWA: staphb/bwa
SAMTOOLS: staphb/samtools
QUALIMAP: pegi3s/qualimap
GATK : broadinstitute/gatk
Deepvariant: google/deepvariant
BGZIP: staphb/bcftools
TABIX: staphb/bcftools
snpEff: -
BCFTOOLS : staphb/bcftools
VCFANNO: -
tabulator: -
************************************************/

process {
    cpus   = { check_max( 16    * task.attempt, 'cpus'   ) }
    memory = { check_max( 64.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }
    shell  = ['/bin/bash', '-euo', 'pipefail']

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    /* PROCESS CPU-MEMORY-CONATINERS-ALLOCATION */
    // withName: 'GATK_HAPLOTYPECALLER' {
    //     cpus           	= { check_max( 6 * task.attempt, 'cpus' ) }
    //     memory         	= { check_max( 16.GB * task.attempt, 'memory' ) }
    //     container       = 'broadinstitute/gatk:latest'
	// 	}

    /* PROCESS CPU-MEMORY-TIME-ALLOCATION*/
    withLabel:process_single {
        cpus          = { check_max( 1                  , 'cpus'    ) }
        memory        = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus          = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus          = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 26.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 2.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus          = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory        = { check_max( 54.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time          = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory        = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
}