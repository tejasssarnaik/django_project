/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
process {
    // ALL files and logs Folder
    // publishDir = [
    //     mode    : params.publish_dir_mode,
    //     pattern : "*.log",          //*.log,*.html,*.pdf,*.error,
    //     path    : { "${params.output_dir}/${params.workflow_id}/GENEASSURE_LOGS/" }
    // ]
    withName: ".*:FASTQC" {
        ext.when    = { !(params.skip_steps && params.skip_steps.split(',').contains('qc')) }
        publishDir  = [
            [ 
                mode    : params.publish_dir_mode,
                pattern : "*log",
                path    : {"${params.output_dir}/${params.workflow_id}/GENEASSURE_LOGS/"}
            ],[
                mode    : params.publish_dir_mode,
                path    : { "${params.output_dir}/${params.workflow_id}/GENEASSURE_REPORTS/FASTQC_REPORT" }
            ]
        ]
    }
    withName: ".*:MULTIQC" {
        ext.when    = { !(params.skip_steps && params.skip_steps.split(',').contains('qc')) }
        publishDir  = [
            [ 
                mode    : params.publish_dir_mode,
                pattern : "*log",
                path    : {"${params.output_dir}/${params.workflow_id}/GENEASSURE_LOGS/"}
            ],[
                mode    : params.publish_dir_mode,
                path    : { "${params.output_dir}/${params.workflow_id}/GENEASSURE_REPORTS/MULTIQC_REPORT/" }
            ]
        ]
    }
    withName: ".*:BWA_MEM" {
        ext.when    = { !(params.skip_steps && params.skip_steps.split(',').contains('mapping')) }
        publishDir  = [
            [
                mode    : params.publish_dir_mode,
                pattern : "*log",
                path    : {"${params.output_dir}/${params.workflow_id}/GENEASSURE_LOGS/"}
            ],[
                mode    : params.publish_dir_mode,
                path    : { "${params.output_dir}/${params.workflow_id}/GENEASSURE_FILES/${sampleid}/BAM_CRAM/" }
            ]
        ]
    }
    withName: "(.*:GATK_MARKDUPLICATES.*|.*:GATK_APPLYBQSR:.*)" {
        ext.when    = { !(params.skip_steps && params.skip_steps.split(',').contains('bamprocessing')) }
        publishDir  = [ 
            [
                mode    : params.publish_dir_mode,
                pattern : "*log",
                path    : {"${params.output_dir}/${params.workflow_id}/GENEASSURE_LOGS/"}
            ],[
                mode    : params.publish_dir_mode,
                path    : { "${params.output_dir}/${params.workflow_id}/GENEASSURE_FILES/${sampleid}/BAM_CRAM/" }
            ]
        ]
    }
    withName: ".*:SAMTOOLS_STATS" {
        ext.when    = { !(params.skip_steps && params.skip_steps.split(',').contains('bamprocessing')) }
        publishDir  = [ 
            [
                mode    : params.publish_dir_mode,
                pattern : "*log",
                path    : {"${params.output_dir}/${params.workflow_id}/GENEASSURE_LOGS/"}
            ],[
                mode    : params.publish_dir_mode,
                path    : { "${params.output_dir}/${params.workflow_id}/GENEASSURE_REPORTS/${sampleid}/" }
            ]
        ]
    }
    withName: ".*:QUALIMAP" {
        ext.when    = { !(params.skip_steps && params.skip_steps.split(',').contains('bamprocessing')) }
        publishDir  = [
            [
                mode    : params.publish_dir_mode,
                pattern : "*log",
                path    : {"${params.output_dir}/${params.workflow_id}/GENEASSURE_LOGS/"}
            ],[
                mode    : params.publish_dir_mode,
                pattern : "*_stats",
                path    : { "${params.output_dir}/${params.workflow_id}/GENEASSURE_REPORTS/${sampleid}/" }
            ]
        ]
    }
    withName: ".*:GATK_HAPLOTYPECALLER" {
        ext.when    = { !(params.skip_steps && params.skip_steps.split(',').contains('vcfcalling')) }
        publishDir  = [ 
            [
                mode    : params.publish_dir_mode,
                pattern : "*log",
                path    : {"${params.output_dir}/${params.workflow_id}/GENEASSURE_LOGS/"}
            ],[
                mode    : params.publish_dir_mode,
                path    : {"${params.output_dir}/${params.workflow_id}/GENEASSURE_FILES/${sampleid}/GAVCF1/"}
            ]
        ]
    }
    withName: ".*:BCFTOOLS_STATS" {
        ext.when    = { !(params.skip_steps && params.skip_steps.split(',').contains('vcfcalling')) }
        publishDir  = [
            [
                mode    : params.publish_dir_mode,
                pattern : "*log",
                path    : {"${params.output_dir}/${params.workflow_id}/GENEASSURE_LOGS/"}
            ],[
                mode    : params.publish_dir_mode,
                path    : { "${params.output_dir}/${params.workflow_id}/GENEASSURE_REPORTS/${sampleid}/" }
            ]
        ]
    }
    withName: ".*:VCFSTATS" {
        ext.when    = { !(params.skip_steps && params.skip_steps.split(',').contains('vcfcalling')) }
        publishDir  = [ 
            [
                mode    : params.publish_dir_mode,
                pattern : "*log",
                path    : {"${params.output_dir}/${params.workflow_id}/GENEASSURE_LOGS/"}
            ],[
                mode    : params.publish_dir_mode,
                path    : { "${params.output_dir}/${params.workflow_id}/GENEASSURE_REPORTS/${sampleid}/" }
            ]
        ]
    }
    withName: ".*:FASTP_SCRIPT" {
        ext.when    = { !(params.skip_steps && params.skip_steps.split(',').contains('trimming')) }
        publishDir  = [ 
            [
                mode    : params.publish_dir_mode,
                pattern : "*log",
                path    : {"${params.output_dir}/${params.workflow_id}/GENEASSURE_LOGS/"}
            ],[
                mode    : params.publish_dir_mode,
                pattern : "{trimmed*}",
                path    : { "${params.output_dir}/${params.workflow_id}/GENEASSURE_FILES/${sampleid}/TRIMMED_FASTQ/" }
            ],[ 
                mode    : params.publish_dir_mode,
                pattern : "{*.json,*.html}",
                path    : { "${params.output_dir}/${params.workflow_id}/GENEASSURE_REPORTS/${sampleid}/" }
            ]
        ]
    }
    withName: ".*:DEEPVARIANT" {
        ext.when = {
            // Check if skip_steps is not empty and contains 'vcfcalling'
            def skipVcfCalling = params.skip_steps && params.skip_steps.split(',').contains('vcfcalling')
            
            // Check if skip_tools is not empty and contains 'deepvariant'
            def skipDeepVariant = params.skip_tools && params.skip_tools.split(',').contains('deepvariant')

            // Skip the process if any of the conditions are true
            !(skipVcfCalling || skipDeepVariant)
        }

        publishDir  = [ 
            [
                mode    : params.publish_dir_mode,
                pattern : "*log",
                path    : {"${params.output_dir}/${params.workflow_id}/GENEASSURE_LOGS/"}
            ],[ 
                mode    : params.publish_dir_mode,
                pattern : "*vcf",
                path    : {"${params.output_dir}/${params.workflow_id}/GENEASSURE_FILES/${sampleid}/GAVCF2/"}
            ],[ 
                mode    : params.publish_dir_mode,
                pattern : "*visual_report.html",
                path    : {"${params.output_dir}/${params.workflow_id}/GENEASSURE_REPORTS/${sampleid}/"}
            ]
        ]
    }
    withName: "(.*:VCF_ANNOTATION:.*)" {
        ext.when    = { !(params.skip_steps && params.skip_steps.split(',').contains('vcf_annotation')) }
        publishDir  = [ 
            [
                mode    : params.publish_dir_mode,
                pattern : "*log",
                path    : {"${params.output_dir}/${params.workflow_id}/GENEASSURE_LOGS/"}
            ],[
                mode    : params.publish_dir_mode,
                path    : { "${params.output_dir}/${params.workflow_id}/GENEASSURE_FILES/${sampleid}/VCF_BCF/" }
            ]
        ]
    }
    withName: "(.*:CLINICAL_SIG:.*)" {
        ext.when    = { !(params.skip_steps && params.skip_steps.split(',').contains('clinical')) }
        publishDir  = [ 
            [
                mode    : params.publish_dir_mode,
                pattern : "*log",
                path    : {"${params.output_dir}/${params.workflow_id}/GENEASSURE_LOGS/"}
            ],[
                mode    : params.publish_dir_mode,
                path    : { "${params.output_dir}/${params.workflow_id}/GENEASSURE_REPORTS/${sampleid}/" }
            ]
        ]
    }
    // withName: "(.*ACTIONABLES)" {
    //     ext.when    = { !(params.skip_steps && params.skip_steps.split(',').contains('actionables')) }
    //     publishDir  = [ 
    //         [
    //             mode    : params.publish_dir_mode,
    //             pattern : "*log",
    //             path    : {"${params.output_dir}/${params.workflow_id}/GENEASSURE_LOGS/"}
    //         ],[
    //             mode    : params.publish_dir_mode,
    //             path    : { "${params.output_dir}/${params.workflow_id}/GENEASSURE_REPORTS/${sampleid}/" }
    //         ]
    //     ]
    // }
}