/************************************************
	BASE-Configuration file for test processes
    Do not modify this configuration file
************************************************/

/* Base parameters */
params {
    cram                = ""
    csv                 = "s3://geneassure-nf-test-data/GA_TEST_DATA/geneassure_test.csv"
    dict                = ""
    fai                 = ""
    fasta               = "s3://geneassure-nf-test-data/GA_TEST_DATA/chr1.fasta"
    indel               = "s3://geneassure-nf-test-data/GA_TEST_DATA/rn_All.chr1.indels.GRCh38.vcf.gz"
    indeltbi            = ""
    intervalList        = "s3://geneassure-nf-test-data/GA_TEST_DATA/intervalslist.bed"
    ipdir               = "s3://geneassure-nf-test-data/GA_TEST_DATA/"
    max_cpus            = 8
    max_memory          = '16.GB'
    max_time            = '4.h'
    output_dir          = "s3://geneassure-nf-test-data/GA_TEST_DATA/"
    paired				= true
    processid           = "GENEASSURE-TEST"
    publish_dir_mode    = 'copy'
    snp                 = "s3://geneassure-nf-test-data/GA_TEST_DATA/rn_All.chr1.snvindels.GRCh38.vcf.gz"
    snptbi              = ""
    trim                = ""
    sequencing_type     = "WES"
    skip_tools          = ""
    skip_steps          = ""
    dryrun              = "false"
    bed                 = "s3://geneassure-nf-test-data/GA_TEST_DATA/intervalslist.bed"
    rglb                = "lib1"
    rgpl                = "ILLUMINA"
    rgpu                = "unit1"
    version             = 'v0.0.1'
}

docker {
    enabled     = true
    temp        = 'auto'
    remove      = true
    runOptions  = '-u $(id -u):$(id -g)'
}

plugins {
    id 'nf-amazon'
}

includeConfig './conf/test_base.config'
includeConfig './conf/test_modules.config'
includeConfig './conf/colors.config'

workDir     = 's3://geneassure-nf-test-data/GA_TEST_DATA/WORK_DIR'


process {
    executor            = 'awsbatch'    
    container           = 'glslabs/glslabs_public:main'
    fai                 = true

    cpus   = { check_max( 4     * task.attempt, 'cpus'   ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time   = { check_max( 1.h  * task.attempt, 'time'   ) }
    shell  = ['/bin/bash', '-euo', 'pipefail']

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    /* PROCESS CPU-MEMORY-TIME-ALLOCATION*/
    withLabel:process_single {
        cpus          = { check_max( 1                  , 'cpus'    ) }
        memory        = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus          = { check_max( 1     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 8.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus          = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 2.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus          = { check_max( 4    * task.attempt, 'cpus'    ) }
        memory        = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 16.h  * task.attempt, 'time'    ) }
    }

    // ALL files and logs Folder
    publishDir = [
        mode    : params.publish_dir_mode,
        pattern : "*",          //*.log,*.html,*.pdf,*.error,
        path    : { "${params.output_dir}/TEST_OUTPUTS/GENEASSURE_LOGS/${sampleid}" }
    ]
    withName: '.*:FASTQC' {
        ext.when         = { !(params.skip_steps && params.skip_steps.split(',').contains('qc')) }
        publishDir       = [
            mode    : params.publish_dir_mode,
            path    : { "${params.output_dir}/TEST_OUTPUTS/GENEASSURE_REPORTS/FASTQC_REPORT" }
        ]
    }
    withName: '.*:MULTIQC' {
        ext.when         = { !(params.skip_steps && params.skip_steps.split(',').contains('qc')) }
        publishDir       = [
            mode    : params.publish_dir_mode,
            path    : { "${params.output_dir}/TEST_OUTPUTS/GENEASSURE_REPORTS/MULTIQC_REPORT/" }
        ]
    }
    withName: ".*:BWA_MEM" {
        ext.when         = { !(params.skip_steps && params.skip_steps.split(',').contains('mapping')) }
        publishDir      = [
            mode    : params.publish_dir_mode,
            path    : { "${params.output_dir}/TEST_OUTPUTS/GENEASSURE_FILES/${sampleid}/BAM_CRAM/" }
        ]
    }
    withName: '(.*:GATK_MARKDUPLICATES.*|.*:GATK_APPLYBQSR:.*)' {
        ext.when         = { !(params.skip_steps && params.skip_steps.split(',').contains('bam_processing')) }
        publishDir      = [
            mode    : params.publish_dir_mode,
            path    : { "${params.output_dir}/TEST_OUTPUTS/GENEASSURE_FILES/${sampleid}/BAM_CRAM/" }
        ]
    }
    withName: ".*:SAMTOOLS_STATS" {
        ext.when         = { !(params.skip_steps && params.skip_steps.split(',').contains('bam_processing')) }
        publishDir      = [
            mode    : params.publish_dir_mode,
            path    : { "${params.output_dir}/TEST_OUTPUTS/GENEASSURE_REPORTS/${sampleid}/" }
        ]
    }
    withName: ".*:QUALIMAP" {
        ext.when         = { !(params.skip_steps && params.skip_steps.split(',').contains('bam_processing')) }
        publishDir      = [
            mode    : params.publish_dir_mode,
            pattern : "*_stats",
            path    : { "${params.output_dir}/TEST_OUTPUTS/GENEASSURE_REPORTS/${sampleid}/" }
        ]
    }
    withName: ".*:GATK_HAPLOTYPECALLER" {
        ext.when         = { !(params.skip_steps && params.skip_steps.split(',').contains('vcf_calling')) }
        publishDir      = [ 
            mode: params.publish_dir_mode,
            path: {"${params.output_dir}/TEST_OUTPUTS/GENEASSURE_FILES/${sampleid}/GAVCF1/"}
        ]
    }
    withName: ".*:BCFTOOLS_STATS" {
        ext.when         = { !(params.skip_steps && params.skip_steps.split(',').contains('vcf_calling')) }
        publishDir      = [
            mode    : params.publish_dir_mode,
            path    : { "${params.output_dir}/TEST_OUTPUTS/GENEASSURE_REPORTS/${sampleid}/" }
        ]
    }
    withName: ".*:VCFSTATS" {
        ext.when         = { !(params.skip_steps && params.skip_steps.split(',').contains('vcf_calling')) }
        publishDir      = [
            mode    : params.publish_dir_mode,
            path    : { "${params.output_dir}/TEST_OUTPUTS/GENEASSURE_REPORTS/${sampleid}/" }
        ]
    }
    withName: ".*:FASTP_SCRIPT" {
        ext.when         = { !(params.skip_steps && params.skip_steps.split(',').contains('trimming')) }
        publishDir       = [
            [
                mode    : params.publish_dir_mode,
                pattern : "{trimmed*}",
                path    : { "${params.output_dir}/TEST_OUTPUTS/GENEASSURE_FILES/${sampleid}/TRIMMED_FASTQ/" }
            ],
            [   mode    : params.publish_dir_mode,
                pattern : "{*.json,*.html}",
                path    : { "${params.output_dir}/TEST_OUTPUTS/GENEASSURE_REPORTS/${sampleid}/" }
            ]
        ]
    }
    withName: ".*:DEEPVARIANT" {
        ext.when         = { !(params.skip_steps && params.skip_steps.split(',').contains('vcf_calling')) }
        publishDir      = [
            [ 
                mode    : params.publish_dir_mode,
                pattern : "*vcf",
                path    : {"${params.output_dir}/TEST_OUTPUTS/GENEASSURE_FILES/${sampleid}/GAVCF2/"}
            ],
            [ 
                mode    : params.publish_dir_mode,
                pattern : "*visual_report.html",
                path    : {"${params.output_dir}/TEST_OUTPUTS/GENEASSURE_REPORTS/${sampleid}/"}
            ]
        ]
    }
}